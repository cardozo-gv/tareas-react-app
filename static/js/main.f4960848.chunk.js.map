{"version":3,"sources":["components/FormTodo.js","App.js","serviceWorker.js","index.js"],"names":["FormTodo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleInput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","name","value","setState","defineProperty","preventDefault","props","onAddTodo","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","concat","toConsumableArray","index","filter","i","_this2","map","key","onClick","removeTodo","href","length","components_FormTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4960848.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass FormTodo extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      title:'',\n      responsible:'',\n      description:'',\n      priority:'low'\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInput(e){\n    const {name,value} = e.target;\n\n    this.setState({\n      [name]:value\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    this.props.onAddTodo(this.state);\n\n  }\n\n  render(){\n    return(\n      <div className=\"card\">\n        <form className=\"card-body\" onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <input type=\"text\"\n                   name=\"title\"\n                   onChange={this.handleInput}\n                   className=\"form-control\"\n                   placeholder=\"Title\"/>\n          </div>\n          <div className=\"form-group\">\n            <input type=\"text\"\n                   name=\"responsible\"\n                   className=\"form-control\"\n                   placeholder=\"Responsible\"\n                   onChange={this.handleInput}/>\n          </div>\n          <div className=\"form-group\">\n            <input type=\"text\"\n                   name=\"description\"\n                   className=\"form-control\"\n                   placeholder=\"Description\"\n                   onChange={this.handleInput}/>\n          </div>\n          <div className=\"form-group\">\n            <select name=\"priority\"\n                    className=\"form-control\"\n                    onChange={this.handleInput}>\n              <option>High</option>\n              <option>Medium</option>\n              <option>Low</option>\n            </select>\n\n          <button type=\"submit\" className=\"btn btn-primary mt-4\">Save</button>\n\n\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default FormTodo;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { todos } from './todos.json'\n\nimport FormTodo from './components/FormTodo'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      todos\n    };\n    this.handleAddTodo = this.handleAddTodo.bind(this)\n  }\n\n  handleAddTodo(todo){\n    this.setState({\n      todos: [...this.state.todos,todo]\n    })\n  }\n\n  removeTodo(index){\n    this.setState({\n      todos : this.state.todos.filter((e,i) => {\n        return i !== index\n      })\n    })\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo,i)=>{\n      return(\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-title text-center\">\n              <h3>{todo.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                { todo.priority }\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p>{todo.description}</p>\n              <p>{ todo.responsible }</p>\n            </div>\n            <div className=\"card-footer\">\n              <button className=\"btn btn-danger\"\n                      onClick={this.removeTodo.bind(this,i)}>Delete</button>\n            </div>\n          </div>\n        </div>\n      )\n    })\n\n\n\n    return (\n      <div className=\"App\">\n          <nav className=\"navbar navbar-dark bg-dark\">\n            <a href=\"/\" className=\"navbar-brand\">Tasks\n              <span className=\"badge badge-pill badge-light ml-2\">\n                { this.state.todos.length }\n              </span>\n            </a>\n          </nav>\n          <div className=\"container\">\n            <div className=\"row mt-4\">\n              <div className=\"col-md-3 text-center\">\n                  <FormTodo onAddTodo={this.handleAddTodo}/>\n              </div>\n            </div>\n\n            <div className=\"col-md-8\">\n              <div className=\"row\">\n                { todos }\n              </div>\n            </div>\n          </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}